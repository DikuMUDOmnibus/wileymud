#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <assert.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "global.h"
#include "bug.h"

#define __SQL_C__
#include "sql.h"

EXEC SQL INCLUDE sqlca;

int db_connected = 0;

int init_sql()
{
  EXEC SQL BEGIN DECLARE SECTION;
  const char *sql_connect = "tcp:postgresql://localhost:5432/wiley";
  const char *sql_user = "quixadhal";
  const char *sql_passwd = "tardis69";
  EXEC SQL END DECLARE SECTION;

  if (db_connected)
    return 1;

  EXEC SQL CONNECT TO :sql_connect AS :sql_user USER :sql_user IDENTIFIED BY :sql_passwd;
  if (sqlca.sqlcode == 0 )
    db_connected = 1;
  else
    db_connected = 0;

  assert(sqlca.sqlcode == 0);
  return db_connected;
}

void close_sql( void )
{
  if (db_connected)
    EXEC SQL DISCONNECT ALL;

  db_connected = 0;
  return 1;
}

char *version_sql( void )
{
  EXEC SQL BEGIN DECLARE SECTION;
  static char version[MAX_STRING_LENGTH];
  EXEC SQL END DECLARE SECTION;

  if (db_connected) {
    EXEC SQL SELECT version() INTO :version LIMIT 1;
    if (sqlca.sqlcode != 0 ) {
      fprintf(stderr, "error code %ld, message %s, rows %ld, warning %c\n",
             sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc, sqlca.sqlerrd[2],
             sqlca.sqlwarn[0]);
      strcpy(version, sqlca.sqlerrm.sqlerrmc);
    }
  } else {
    strcpy(version, "Not Connected");
  }
  return version;
}

int compare_dates_file_sql( char *filename, char *tablename, char *fieldname )
{
  EXEC SQL BEGIN DECLARE SECTION;
  char statement[MAX_STRING_LENGTH];
  int sql_time = 0;
  EXEC SQL END DECLARE SECTION;
  struct stat statbuf;
  int file_time = 0;

  sprintf(statement, "SELECT floor(extract(epoch FROM %s))::int FROM %s ORDER BY %s DESC LIMIT 1",
          fieldname, tablename, fieldname);
  EXEC SQL PREPARE stmt FROM :statement;
  EXEC SQL EXECUTE stmt INTO :sql_time;
  EXEC SQL DEALLOCATE PREPARE stmt;

  if(!stat(filename, &statbuf)) {
    file_time = (int)statbuf.st_mtime;
  }

  return file_time < sql_time ? -1 : (file_time == sql_time ? 0 : 1);
}

